<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://www.burhanloey.com/' rel='self' type='application/rss+xml'/>
<title>
blog burhanloey
</title>
<link>
http://www.burhanloey.com/
</link>
<description>
burhanloey's blog
</description>
<lastBuildDate>
Sun, 28 May 2017 19:10:52 +0800
</lastBuildDate>
<generator>
clj-rss
</generator>
<item>
<guid>
http://www.burhanloey.com/blog/posts/2017-05-06-greenspun-tenth-rule/
</guid>
<link>
http://www.burhanloey.com/blog/posts/2017-05-06-greenspun-tenth-rule/
</link>
<title>
Greenspun's Tenth Rule
</title>
<description>
 &lt;p&gt; Sebelum ini saya pernah menggunakan feature dari Java 8 untuk membuat &lt;em&gt;concurrency&lt;/em&gt; iaitu dengan menggunakan interface &lt;a href='https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html'&gt;CompletableFuture&lt;/a&gt;. Ada suatu ketika, interface tersebut bukannya memudahkan, tapi merumitkan lagi keadaan.&lt;/p&gt;&lt;p&gt;Masalah berpunca kerana Java 8 hanya menyediakan &lt;a href='https://docs.oracle.com/javase/8/docs/api/java/util/function/BiFunction.html'&gt;BiFunction&lt;/a&gt; yang kita boleh gunakan untuk method &lt;a href='https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#thenCombine-java.util.concurrent.CompletionStage-java.util.function.BiFunction-'&gt;thenCombine&lt;/a&gt;. Maksudnya method tersebut hanya boleh menerima dua proses sahaja. Jika kita mahu lebih daripada dua, kita boleh menggunakan library &lt;a href='https://github.com/vavr-io/vavr'&gt;Javaslang/Vavr&lt;/a&gt; dan menggunakan interface Function3, Function4, dan sebagainya tetapi itu topik yang lain.&lt;/p&gt;&lt;p&gt;Untuk menyelesaikan proses serentak yang lebih daripada dua, Java 8 ada menyediakan method &lt;a href='https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#allOf-java.util.concurrent.CompletableFuture...-'&gt;allOf&lt;/a&gt;. Namun, method tersebut pun ada karenahnya sendiri.&lt;/p&gt;&lt;p&gt;Yang pertama, parameter untuk &lt;strong&gt;allOf&lt;/strong&gt; ialah &lt;em&gt;variadic&lt;/em&gt;. Maksudnya method tersebut boleh menerima tak kira berapa banyak argument yang kita mahu letak, ataupun hanya letak array. Oops, tunggu dulu, kita tidak boleh meletakkan array untuk &lt;strong&gt;allOf&lt;/strong&gt; sebab CompletableFuture ialah &lt;em&gt;generic interface&lt;/em&gt;. Dalam Java kita tidak boleh membuat array untuk generic. Error tersebut dipanggil &lt;em&gt;generic array creation error&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;Yang kedua, method &lt;strong&gt;allOf&lt;/strong&gt; akan return CompletableFuture dengan data type &lt;em&gt;Void&lt;/em&gt;. Ya, &lt;em&gt;VOID&lt;/em&gt;. Memang ramai yang complain pasal ini.&lt;/p&gt;&lt;p&gt;Jadi, untuk menggunakan &lt;strong&gt;allOf&lt;/strong&gt; kita perlu menghantar argument satu per satu, kemudian untuk mendapatkan &lt;em&gt;result&lt;/em&gt; kita ambik balik daripada Future masing-masing menggunakan &lt;a href='https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#join&amp;ndash;'&gt;join&lt;/a&gt;. Sesiapa yang dah boleh agak, ya, code tersebut memang akan jadi sangatlah buruk.&lt;/p&gt;&lt;p&gt;Sekarang kita patah balik ke programming language Clojure. Di post yang sama sebelum ini, saya juga ada perkenalkan library Clojure yang menggunakan CompletableFuture dari Java 8, iaitu library &lt;a href='https://github.com/funcool/promesa'&gt;promesa&lt;/a&gt;. Saya pun intai-intai macam mana library tersebut mengendalikan masalah ini.&lt;/p&gt;&lt;p&gt;Seperti yang saya jangkakan, &lt;a href='http://funcool.github.io/promesa/latest/#working-with-collections'&gt;sangat simple, sangat mudah&lt;/a&gt;. Ya rabbi, kedua-dua isu yang saya senaraikan di atas terus hilang.&lt;/p&gt;&lt;p&gt;Secara jujurnya saya memang tepuk dahi sewaktu membaca documentation tersebut.&lt;/p&gt;&lt;p&gt;Akhir kata, jika nak dikaitkan dengan tajuk artikel ini, saya masih setuju dengan pendapat &lt;a href='https://en.wikipedia.org/wiki/Greenspun%27s_tenth_rule'&gt;Greenspun's tenth rule&lt;/a&gt; yang menyatakan:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Any sufficiently complicated C or Fortran program contains an ad-hoc,
informally-specified, bug-ridden, slow implementation of half of Common Lisp.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Cuma ganti C dengan Java, dan Common Lisp dengan Clojure sebab mereka adik-beradik.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sat, 06 May 2017 00:00:00 +0800
</pubDate>
</item>
<item>
<guid>
http://www.burhanloey.com/blog/posts/2017-02-18-concurrency-model-dalam-clojure/
</guid>
<link>
http://www.burhanloey.com/blog/posts/2017-02-18-concurrency-model-dalam-clojure/
</link>
<title>
Concurrency Model dalam Clojure
</title>
<description>
 &lt;p&gt; Selepas beberapa minggu menulis &lt;em&gt;fully asynchronous code&lt;/em&gt; dalam Java 8, terdetik hati untuk menulis &lt;em&gt;asynchronous code&lt;/em&gt; dalam programming language kegemaran saya iaitu Clojure.&lt;/p&gt;&lt;p&gt;Setelah menggodek internet, saya mendapati Clojure ada beberapa model untuk membuat &lt;em&gt;concurrency&lt;/em&gt;, antaranya:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;future/promise&lt;/li&gt;&lt;li&gt;coroutine (menggunakan library &lt;a href='https://github.com/clojure/core.async'&gt;core.async&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;actor model (menggunakan library &lt;a href='https://github.com/puniverse/pulsar'&gt;pulsar&lt;/a&gt;/quasar)&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/funcool/promesa'&gt;promesa&lt;/a&gt; (library untuk menggunakan CompletableFuture Java 8)&lt;/li&gt;&lt;li&gt;parallel workers (interop dengan Java)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Future/promise&lt;/strong&gt; sememangnya sudah ada secara &lt;em&gt;native&lt;/em&gt; dalam Clojure. Saya memang suka model yang ini terutamanya apabila Clojure menggunakan &lt;em&gt;immutable data&lt;/em&gt; secara &lt;em&gt;default&lt;/em&gt; jadi saya tidak perlu bimbang dengan &lt;em&gt;race condition&lt;/em&gt;. &lt;strong&gt;Atoms&lt;/strong&gt;, &lt;strong&gt;agents&lt;/strong&gt;, dan &lt;strong&gt;refs&lt;/strong&gt; boleh digunakan untuk menguruskan &lt;em&gt;state&lt;/em&gt;, jadi saya tidak perlu menggunakan &lt;em&gt;lock&lt;/em&gt; seperti Java 7.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Coroutine&lt;/strong&gt; adalah model yang sama digunakan dalam programming language Go. Model ini menghantar proses melalui &lt;em&gt;channel&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Actor model&lt;/strong&gt; pula digunakan dalam programming language seperti Scala dan Erlang. Saya tidak tahu sangat tentang actor model.&lt;/p&gt;&lt;p&gt;Library &lt;strong&gt;promesa&lt;/strong&gt; membolehkan programmer Clojure menulis code seperti Java 8, tetapi saya cuba elakkan kerana perlu menggunakan library luar.&lt;/p&gt;&lt;p&gt;Untuk &lt;strong&gt;parallel workers&lt;/strong&gt;, nasihat saya cuba elakkan.&lt;/p&gt;&lt;p&gt;Setelah melihat beberapa pilihan ini, saya menyangkakan pilihan cuma bergantung kepada programmer sahaja, ikut mana yang diminati. Namun, saya ada terbaca di stackoverflow yang menyatakan untuk memilih concurrency model perlulah mengikut situasi. Cuma saya masih belum nampak lagi.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sat, 18 Feb 2017 00:00:00 +0800
</pubDate>
</item>
<item>
<guid>
http://www.burhanloey.com/blog/posts/2016-02-10-etika-web-scraping/
</guid>
<link>
http://www.burhanloey.com/blog/posts/2016-02-10-etika-web-scraping/
</link>
<title>
Etika Web Scraping
</title>
<description>
 &lt;p&gt; Baru-baru ini saya ada praktis concurrency dengan membuat web scraping menggunakan C++11. Sebelum ini saya takut untuk programming menggunakan C++ sebab terpaksa membuat memory management secara manual. Selepas membaca segala best practice untuk C++, barulah nampak yang C++11/C++14 boleh tahan elegant-nya. Yang nampak kurang sedap bila ada orang mengaku pandai C++ tapi programming macam C.&lt;/p&gt;&lt;p&gt;Berbalik ke cerita web scraping, C++ memang elegant, sehinggalah kena guna library C. Kalau tak jumpa wrapper C++ untuk library tersebut, mulut memang akan sumpah seranah waktu programming. Saya menggunakan library 'libcurl' untuk mendapatkan HTML daripada website, 'libxml2' untuk parse code HTML, dan library Boost untuk membuat concurrency.&lt;/p&gt;&lt;p&gt;'libcurl' dan 'libxml2' memang sudah ada wrapper C++, tetapi untuk educational purpose, saya cuba untuk wrap sendiri library tersebut menggunakan kaedah Resource Acquisition Is Initialization (RAII). Kaedah RAII memang selalu digunakan dalam C++ untuk memudahkan memory management.&lt;/p&gt;&lt;p&gt;Semasa cubaan awal, segalanya berjalan lancar. Boleh dapatkan code HTML daripada website, dan boleh parse HTML untuk dapatkan data yang diingini. Cabaran bermula apabila saya mula membuat concurrency. Apabila run sahaja, terus dapat segfault (segmentation fault). Kalau yang dah biasa, memang akan tahu yang segfault mesti punca daripada masalah memory.&lt;/p&gt;&lt;p&gt;Jadi, macam-macamlah yang saya ubahsuai code untuk menyelesaikan masalah. Tukar daripada kaedah menggunakan thread seperti biasa, kepada menggunakan future/promise, dan akhir sekali kepada menggunakan barrier. Selepas meletakkan barrier, saya perasan ada data yang saya dapat fetch sampai satu tahap barulah akan segfault seperti biasa.&lt;/p&gt;&lt;p&gt;Kemudian saya pun tengoklah macam mana rupa code HTML yang saya fetch tersebut. Barulah perasan yang saya dah kena block daripada website tersebut. Seperti semua sedia maklum, program C++ sememangnya laju. Jadi web scraping dengan concurrency akan jadi amat laju dan berpotensi membuatkan pemilik website tersebut berasa bimbang, lantas akan menghalang kita daripada mengakses website mereka.&lt;/p&gt;&lt;p&gt;Kesimpulannya, moral of the story untuk kisah ini ialah kita mestilah beretika semasa membuat web scraping. Seboleh-bolehnya jangan memaksa sangat website tersebut untuk handle request daripada program kita. Tak perlu laju-laju sangat pun takpe, janji dapat data yang dihajati. Kalau nak lagi elok, minta izin daripada pemilik website tersebut untuk membuat web scraping, lagi bagus.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 10 Feb 2016 00:00:00 +0800
</pubDate>
</item>
<item>
<guid>
http://www.burhanloey.com/blog/posts/2015-10-22-misi-mencari-ide-untuk-go/
</guid>
<link>
http://www.burhanloey.com/blog/posts/2015-10-22-misi-mencari-ide-untuk-go/
</link>
<title>
Misi Mencari IDE Untuk Go
</title>
<description>
 &lt;blockquote&gt;&lt;p&gt; &lt;strong&gt;UPDATE&lt;/strong&gt;: Selepas beberapa hari menggunakan Atom, saya jumpa satu bug. Kalau saya ada masa untuk reproduce bug tersebut, saya akan submit issue. Jadi, untuk mengelak daripada bug tersebut, saya kembali menggunakan LiteIDE dan mendapati IDE tersebut sudah boleh 'nampak' package &lt;code&gt;appengine&lt;/code&gt; disebabkan langkah-langkah yang saya lakukan di bawah. Yay! &lt;/p&gt;&lt;p&gt;Pada masa akan datang, mungkin saya akan cuba Eclipse pulak. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Saya memilih Go sebab saya perlukan programming language yang strict. Walaupun Go masih baru, Go menepati citarasa saya, antaranya static-typing. Kelebihan static-typing language adalah supaya dapat manfaat daripada IDE, seperti code auto-completion. Disebabkan Go masih baru, support daripada IDE tidaklah setanding dengan Java. Cari punya cari, akhirnya saya jumpa text editor yang boleh menjadi IDE untuk Go, iaitu &lt;a href='https://atom.io/'&gt;Atom&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Untuk menggunakan Atom untuk Go, saya menambah package &lt;a href='https://atom.io/packages/go-plus'&gt;go-plus&lt;/a&gt;. Selepas selesai install package tersebut, saya download functionality yang diperlukan seperti &lt;code&gt;gocode&lt;/code&gt;, &lt;code&gt;gofmt&lt;/code&gt;, &lt;code&gt;goimports&lt;/code&gt;, &lt;code&gt;go vet&lt;/code&gt;, &lt;code&gt;golint&lt;/code&gt;, &lt;code&gt;go build&lt;/code&gt; dan &lt;code&gt;go test&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Sebelum ini saya menggunakan &lt;a href='https://github.com/visualfc/liteide'&gt;LiteIDE&lt;/a&gt;. LiteIDE juga bagus, tetapi disebabkan saya menggunakan cloud hosting Google App Engine, ada beberapa package yang IDE tersebut 'tak nampak'. Jadi, package &lt;code&gt;appengine&lt;/code&gt; dan yang berkaitan tidak dapat support daripada code auto-completion.&lt;/p&gt;&lt;p&gt;Untuk membuatkan Atom boleh nampak package &lt;code&gt;appengine&lt;/code&gt;, saya perlu set library path untuk &lt;code&gt;gocode&lt;/code&gt; dengan cara:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;gocode set lib-path c:\go&amp;#95;appengine\goroot\pkg\windows&amp;#95;amd64&amp;#95;appengine
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Sekarang barulah ada code auto-completion untuk package &lt;code&gt;appengine&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Satu lagi masalah ialah apabila save file program Go, akan keluar error yang menyatakan &lt;code&gt;src/appengine&lt;/code&gt; tidak berada dalam &lt;code&gt;$GOPATH&lt;/code&gt; dan &lt;code&gt;$GOROOT&lt;/code&gt;. Untuk menyelesaikan masalah ini, saya membuat symlink:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;mklink /J $GOPATH/src/appengine c:\go&amp;#95;appengine\goroot\src\appengine
mklink /J $GOPATH/src/appengine&amp;#95;internal c:\go&amp;#95;appengine\goroot\src\appengine&amp;#95;internal
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href='https://technet.microsoft.com/en-us/library/cc753194.aspx'&gt;mklink&lt;/a&gt; ialah command dalam Windows untuk membuat symlink. Kalau anda menggunakan operating system yang lain akan berbeza.&lt;/p&gt;&lt;p&gt;Walaupun semua steps di atas agak leceh, saya tetap berpuas hati.&lt;/p&gt;&lt;p&gt;Alternatif kepada semua cara di atas adalah dengan menggunakan package &lt;code&gt;appengine&lt;/code&gt; yang baru iaitu &lt;code&gt;google.golang.org/appengine&lt;/code&gt;. Tetapi dengan menggunakan package tersebut, saya tidak dapat code auto-completion jika menggunakan package yang berada di dalamnya seperti &lt;code&gt;google.golang.org/appengine/user&lt;/code&gt; dan &lt;code&gt;google.golang.org/appengine/log&lt;/code&gt;.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 22 Oct 2015 00:00:00 +0800
</pubDate>
</item>
<item>
<guid>
http://www.burhanloey.com/blog/posts/2015-10-19-pertama-kali-menggunakan-closure-sambungan/
</guid>
<link>
http://www.burhanloey.com/blog/posts/2015-10-19-pertama-kali-menggunakan-closure-sambungan/
</link>
<title>
Pertama Kali Menggunakan 'Closure' (sambungan...)
</title>
<description>
 &lt;p&gt; Sebelum ini saya ada tunjuk bagaimana kita boleh menggunakan closure untuk menggabungkan satu function dengan function yang lain. Di bahagian paling bawah post tersebut, saya ada meminta pembaca untuk selesaikan code yang masih ada bahagian berulang. Jika anda belum mencuba dan ingin mencuba boleh lihat di &lt;a href='/blog/blog/2015/pertama-kali-menggunakan-closure.html'&gt;post ini&lt;/a&gt;. Jika tak mahu, boleh teruskan membaca untuk lihat cara saya menyelesaikannya.&lt;/p&gt;&lt;p&gt;Jadi, kenapa kena guna closure? Saje, supaya code nampak lebih elegant. Kalau boleh semua function saya nak guna closure.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/blog/images/all-closures.png&quot; alt=&quot;Write all the functions with closure!!!&quot; /&gt;&lt;/p&gt;&lt;p&gt;Baiklah. Code sebelum ini masih ada bahagian yang berulang, iaitu:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;// Check password length. Toggle icon accordingly. Password must be at least 
// 6 characters. 
function validatePassword&amp;#40;&amp;#41; {
    if &amp;#40;$&amp;#40;&amp;quot;#password-input&amp;quot;&amp;#41;.val&amp;#40;&amp;#41;.length &amp;gt;= 6&amp;#41; {
        $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.removeClass&amp;#40;&amp;quot;glyphicon-remove&amp;quot;&amp;#41;;
        $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.addClass&amp;#40;&amp;quot;glyphicon-ok&amp;quot;&amp;#41;;
    } else {
        $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.removeClass&amp;#40;&amp;quot;glyphicon-ok&amp;quot;&amp;#41;;
        $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.addClass&amp;#40;&amp;quot;glyphicon-remove&amp;quot;&amp;#41;;
    }
}

// Check if password verification is the same with password. Toggle icon
// accordingly.
function verifyPassword&amp;#40;&amp;#41; {
    if &amp;#40;$&amp;#40;&amp;quot;#verify-password-input&amp;quot;&amp;#41;.val&amp;#40;&amp;#41; === $&amp;#40;&amp;quot;#password-input&amp;quot;&amp;#41;.val&amp;#40;&amp;#41;&amp;#41; {
        $&amp;#40;&amp;quot;#verify-password-check&amp;quot;&amp;#41;.removeClass&amp;#40;&amp;quot;glyphicon-remove&amp;quot;&amp;#41;;
        $&amp;#40;&amp;quot;#verify-password-check&amp;quot;&amp;#41;.addClass&amp;#40;&amp;quot;glyphicon-ok&amp;quot;&amp;#41;;
    } else {
        $&amp;#40;&amp;quot;#verify-password-check&amp;quot;&amp;#41;.removeClass&amp;#40;&amp;quot;glyphicon-ok&amp;quot;&amp;#41;;
        $&amp;#40;&amp;quot;#verify-password-check&amp;quot;&amp;#41;.addClass&amp;#40;&amp;quot;glyphicon-remove&amp;quot;&amp;#41;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Tetapi masalahnya condition untuk if else antara kedua-dua function tersebut adalah berlainan.&lt;/p&gt;&lt;p&gt;Dalam functional programming, semua benda kita boleh jadikan function, dan kita juga boleh passing function melalui parameter. Jadi, secara teorinya kita akan jadikan condition untuk if else tersebut sebagai function, kemudian kita akan hantar function tersebut melalui parameter untuk closure. Saya akan tunjukkan perlahan-lahan menggunakan salah satu function tersebut.&lt;/p&gt;&lt;p&gt;Function yang asal adalah seperti ini:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;function validatePassword&amp;#40;&amp;#41; {
    if &amp;#40;$&amp;#40;&amp;quot;#password-input&amp;quot;&amp;#41;.val&amp;#40;&amp;#41;.length &amp;gt;= 6&amp;#41; {
        $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.removeClass&amp;#40;&amp;quot;glyphicon-remove&amp;quot;&amp;#41;;
        $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.addClass&amp;#40;&amp;quot;glyphicon-ok&amp;quot;&amp;#41;;
    } else {
        $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.removeClass&amp;#40;&amp;quot;glyphicon-ok&amp;quot;&amp;#41;;
        $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.addClass&amp;#40;&amp;quot;glyphicon-remove&amp;quot;&amp;#41;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Sekarang kita asingkan condition tersebut ke dalam satu variable:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;function validatePassword&amp;#40;&amp;#41; {
    var ok = $&amp;#40;&amp;quot;#password-input&amp;quot;&amp;#41;.val&amp;#40;&amp;#41;.length &amp;gt;= 6;

    if &amp;#40;ok&amp;#41; {
        $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.removeClass&amp;#40;&amp;quot;glyphicon-remove&amp;quot;&amp;#41;;
        $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.addClass&amp;#40;&amp;quot;glyphicon-ok&amp;quot;&amp;#41;;
    } else {
        $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.removeClass&amp;#40;&amp;quot;glyphicon-ok&amp;quot;&amp;#41;;
        $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.addClass&amp;#40;&amp;quot;glyphicon-remove&amp;quot;&amp;#41;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Dan untuk menjadikannya sebagai function, kita boleh menggunakan singleton yang akan self-invoke:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;function validatePassword&amp;#40;&amp;#41; {
    var ok = &amp;#40;function&amp;#40;&amp;#41; { return $&amp;#40;&amp;quot;#password-input&amp;quot;&amp;#41;.val&amp;#40;&amp;#41;.length &amp;gt;= 6; }&amp;#41;&amp;#40;&amp;#41;;

    if &amp;#40;ok&amp;#41; {
        $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.removeClass&amp;#40;&amp;quot;glyphicon-remove&amp;quot;&amp;#41;;
        $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.addClass&amp;#40;&amp;quot;glyphicon-ok&amp;quot;&amp;#41;;
    } else {
        $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.removeClass&amp;#40;&amp;quot;glyphicon-ok&amp;quot;&amp;#41;;
        $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.addClass&amp;#40;&amp;quot;glyphicon-remove&amp;quot;&amp;#41;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Akhirnya, kita sudah menjadikan condition tersebut sebagai sebuah function, dan kita boleh asingkan condition tersebut di luar, seperti berikut:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;function&amp;#40;&amp;#41; {
    return $&amp;#40;&amp;quot;#password-input&amp;quot;&amp;#41;.val&amp;#40;&amp;#41;.length &amp;gt;= 6;
}

function validatePassword&amp;#40;condition&amp;#41; {
    var ok = condition&amp;#40;&amp;#41;;

    if &amp;#40;ok&amp;#41; {
        $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.removeClass&amp;#40;&amp;quot;glyphicon-remove&amp;quot;&amp;#41;;
        $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.addClass&amp;#40;&amp;quot;glyphicon-ok&amp;quot;&amp;#41;;
    } else {
        $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.removeClass&amp;#40;&amp;quot;glyphicon-ok&amp;quot;&amp;#41;;
        $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.addClass&amp;#40;&amp;quot;glyphicon-remove&amp;quot;&amp;#41;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Masalah dengan cara ini ialah apabila kita hantar condition melalui parameter, kita akan invoke function validatePassword() secara automatik. Untuk tidak invoke function tersebut, kita boleh menggunakan closure:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;function&amp;#40;&amp;#41; {
    return $&amp;#40;&amp;quot;#password-input&amp;quot;&amp;#41;.val&amp;#40;&amp;#41;.length &amp;gt;= 6;
}

function validatePassword&amp;#40;condition&amp;#41; {
    return function&amp;#40;&amp;#41; {
        var ok = condition&amp;#40;&amp;#41;;
        
        if &amp;#40;ok&amp;#41; {
            $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.removeClass&amp;#40;&amp;quot;glyphicon-remove&amp;quot;&amp;#41;;
            $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.addClass&amp;#40;&amp;quot;glyphicon-ok&amp;quot;&amp;#41;;
        } else {
            $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.removeClass&amp;#40;&amp;quot;glyphicon-ok&amp;quot;&amp;#41;;
            $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.addClass&amp;#40;&amp;quot;glyphicon-remove&amp;quot;&amp;#41;;
        }
    };
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Sekarang untuk menyelesaikan masalah code yang berulang, kita boleh abstract-kan function menggunakan keyword &lt;code&gt;this&lt;/code&gt;, seperti berikut:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;function toggleIcon&amp;#40;condition&amp;#41; {
    return function&amp;#40;&amp;#41; {
        var ok = condition&amp;#40;&amp;#41;;
        var icon = $&amp;#40;this&amp;#41;;
        
        if &amp;#40;ok&amp;#41; {
            icon.removeClass&amp;#40;&amp;quot;glyphicon-remove&amp;quot;&amp;#41;;
            icon.addClass&amp;#40;&amp;quot;glyphicon-ok&amp;quot;&amp;#41;;
        } else {
            icon.removeClass&amp;#40;&amp;quot;glyphicon-ok&amp;quot;&amp;#41;;
            icon.addClass&amp;#40;&amp;quot;glyphicon-remove&amp;quot;&amp;#41;;
        }
    };
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Kalau mahu lebih ringkas, boleh tulis seperti ini:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;function toggleIcon&amp;#40;ok&amp;#41; {
    return function&amp;#40;&amp;#41; {
        var icon = $&amp;#40;this&amp;#41;;
        
        if &amp;#40;ok&amp;#40;&amp;#41;&amp;#41; {
            icon.removeClass&amp;#40;&amp;quot;glyphicon-remove&amp;quot;&amp;#41;;
            icon.addClass&amp;#40;&amp;quot;glyphicon-ok&amp;quot;&amp;#41;;
        } else {
            icon.removeClass&amp;#40;&amp;quot;glyphicon-ok&amp;quot;&amp;#41;;
            icon.addClass&amp;#40;&amp;quot;glyphicon-remove&amp;quot;&amp;#41;;
        }
    };
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note: Icon boleh di-refer menggunakan &lt;code&gt;$&amp;#40;this&amp;#41;&lt;/code&gt;, dan bukannya seperti sebelum ini di mana kita menggunakan &lt;code&gt;$&amp;#40;this&amp;#41;.parent&amp;#40;&amp;#41;.next&amp;#40;&amp;#41;&lt;/code&gt; kerana function tersebut adalah callback kepada event untuk icon itu sendiri. Kalau nak tukar scope, boleh guna &lt;code&gt;bind&amp;#40;&amp;#41;&lt;/code&gt;, tapi itu dah lari dari topik.&lt;/p&gt;&lt;p&gt;Sekarang kita sudah ada closure untuk handle toggle icon.&lt;/p&gt;&lt;p&gt;Selepas refactor, akhir sekali code kita akan jadi seperti ini:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;// Condition that states that password input must be minimum of 6 characters.
function validate&amp;#40;&amp;#41; {
    return $&amp;#40;&amp;quot;#password-input&amp;quot;&amp;#41;.val&amp;#40;&amp;#41;.length &amp;gt;= 6;
}

// Condition that states that password input must be the same as verify password
// input.
function verify&amp;#40;&amp;#41; {
    return $&amp;#40;&amp;quot;#verify-password-input&amp;quot;&amp;#41;.val&amp;#40;&amp;#41; === $&amp;#40;&amp;quot;#password-input&amp;quot;&amp;#41;.val&amp;#40;&amp;#41;;
}

// Toggle icon according to condition. If true, shows ok. If false, shows cross.
function toggleIcon&amp;#40;ok&amp;#41; {
    return function&amp;#40;&amp;#41; {
        var icon = $&amp;#40;this&amp;#41;;
        
        if &amp;#40;ok&amp;#40;&amp;#41;&amp;#41; {
            icon.removeClass&amp;#40;&amp;quot;glyphicon-remove&amp;quot;&amp;#41;;
            icon.addClass&amp;#40;&amp;quot;glyphicon-ok&amp;quot;&amp;#41;;
        } else {
            icon.removeClass&amp;#40;&amp;quot;glyphicon-ok&amp;quot;&amp;#41;;
            icon.addClass&amp;#40;&amp;quot;glyphicon-remove&amp;quot;&amp;#41;;
        }
    };
}

// Show icon if the input is not null.
function showIcon&amp;#40;duration, callback&amp;#41; {
    return function&amp;#40;&amp;#41; {
        var input = $&amp;#40;this&amp;#41;;
        var icon = $&amp;#40;this&amp;#41;.parent&amp;#40;&amp;#41;.next&amp;#40;&amp;#41;;
        
        if &amp;#40;input.val&amp;#40;&amp;#41;.length &amp;gt; 0&amp;#41; {
            icon.show&amp;#40;duration, callback&amp;#41;;
        } else {
            icon.hide&amp;#40;duration&amp;#41;;
        }
    };
}

// Set-up events.
$&amp;#40;&amp;quot;#password-input&amp;quot;&amp;#41;.keyup&amp;#40;showIcon&amp;#40;0, toggleIcon&amp;#40;validate&amp;#41;&amp;#41;&amp;#41;;
$&amp;#40;&amp;quot;#verify-password-input&amp;quot;&amp;#41;.keyup&amp;#40;showIcon&amp;#40;0, toggleIcon&amp;#40;verify&amp;#41;&amp;#41;&amp;#41;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Bandingkan dengan code sebelum ini, yang mana lebih anda suka?&lt;/p&gt;&lt;p&gt;Kesimpulannya, closure is awesome. Seperti yang tertulis di Mozilla, kita boleh menggunakan closure sebagai 'function factory'. Anda boleh baca dengan lebih lanjut di contoh makeAdder di &lt;a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures#Closure'&gt;sini&lt;/a&gt;.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Mon, 19 Oct 2015 00:00:00 +0800
</pubDate>
</item>
<item>
<guid>
http://www.burhanloey.com/blog/posts/2015-10-18-pertama-kali-menggunakan-closure/
</guid>
<link>
http://www.burhanloey.com/blog/posts/2015-10-18-pertama-kali-menggunakan-closure/
</link>
<title>
Pertama Kali Menggunakan 'Closure'
</title>
<description>
 &lt;p&gt; Saya masih baru dalam web development dan functional programming. Semasa belajar functional programming dengan Scala, ada beberapa konsep dan teknik yang rasa-rasa macam faham, rasa-rasa macam tak, rasa-rasa tak pasti, antaranya lambda expression, map reduce, closure, dan monad.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/blog/images/i-dont-get-it.png&quot; alt=&quot;I don't get it&quot; /&gt;&lt;/p&gt;&lt;p&gt;Semuanya terjawab sedikit demi sedikit apabila saya mula menggunakan JavaScript. Dalam tutorial Scala, kita terus menggunakan simbol-simbol seperti simbol lambda, jadi kita tak beberapa nak nampak apa yang berlaku under the hood semasa menggunakan simbol lambda. Berlainan dengan JavaScript, di mana kita perlu menulis anonymous function untuk membuat map reduce tanpa menggunakan simbol lambda. Lambda expression untuk JavaScript akan ada support dalam ECMAScript 6 nanti.&lt;/p&gt;&lt;p&gt;Berbalik pada tajuk asal, antara feature dalam functional programming ialah closure. Kalau tengok pada mana-mana tutorial, contoh yang mereka beri adalah untuk menunjukkan bagaimana return function boleh akses variable dalam function yang lain. Jadi, saya pun tertanya-tanya, &quot;Apa yang special-nya?&quot;, saya boleh sahaja letak variable tersebut sebagai global dan akses dari mana-mana sahaja, betul tak? Pendapat saya itu kekal sehinggalah saya cuba membuat web development, barulah saya nampak betapa awesome-nya konsep closure ini.&lt;/p&gt;&lt;p&gt;Sebelum itu, saya nak tunjuk masalah apa yang saya nak selesaikan, iaitu sign up form. Jangan gelak, saya masih baru.&lt;/p&gt;&lt;p&gt;Sign up form yang saya nak buat simple sahaja. Ada tiga textfield untuk username, password, dan verify password. Untuk kedua-dua textfield password, saya nak display icon untuk menunjukkan sama ada input tersebut dibenarkan ataupun tidak sebaik sahaja user tulis sesuatu. Untuk textfield password, input yang saya benarkan hanyalah 6 character minimum. Untuk textfield verify password pula, input yang saya benarkan ialah input yang sama dengan password(obviously).&lt;/p&gt;&lt;p&gt;Saya menggunakan jQuery, jadi pada mulanya saya tulis code seperti ini:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;// Check password length. Toggle icon accordingly. Password must be at least 
// 6 characters. 
function validatePassword&amp;#40;&amp;#41; {
    if &amp;#40;$&amp;#40;&amp;quot;#password-input&amp;quot;&amp;#41;.val&amp;#40;&amp;#41;.length &amp;gt;= 6&amp;#41; {
        $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.removeClass&amp;#40;&amp;quot;glyphicon-remove&amp;quot;&amp;#41;;
        $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.addClass&amp;#40;&amp;quot;glyphicon-ok&amp;quot;&amp;#41;;
    } else {
        $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.removeClass&amp;#40;&amp;quot;glyphicon-ok&amp;quot;&amp;#41;;
        $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.addClass&amp;#40;&amp;quot;glyphicon-remove&amp;quot;&amp;#41;;
    }
}

// Check if password verification is the same with password. Toggle icon
// accordingly.
function verifyPassword&amp;#40;&amp;#41; {
    if &amp;#40;$&amp;#40;&amp;quot;#verify-password-input&amp;quot;&amp;#41;.val&amp;#40;&amp;#41; === $&amp;#40;&amp;quot;#password-input&amp;quot;&amp;#41;.val&amp;#40;&amp;#41;&amp;#41; {
        $&amp;#40;&amp;quot;#verify-password-check&amp;quot;&amp;#41;.removeClass&amp;#40;&amp;quot;glyphicon-remove&amp;quot;&amp;#41;;
        $&amp;#40;&amp;quot;#verify-password-check&amp;quot;&amp;#41;.addClass&amp;#40;&amp;quot;glyphicon-ok&amp;quot;&amp;#41;;
    } else {
        $&amp;#40;&amp;quot;#verify-password-check&amp;quot;&amp;#41;.removeClass&amp;#40;&amp;quot;glyphicon-ok&amp;quot;&amp;#41;;
        $&amp;#40;&amp;quot;#verify-password-check&amp;quot;&amp;#41;.addClass&amp;#40;&amp;quot;glyphicon-remove&amp;quot;&amp;#41;;
    }
}

// Show icon if the input is not null, and then validate.
function showIconAndValidate&amp;#40;&amp;#41; {
    if &amp;#40;$&amp;#40;&amp;quot;#password-input&amp;quot;&amp;#41;.val&amp;#40;&amp;#41;.length &amp;gt; 0&amp;#41; {
        $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.show&amp;#40;0, validatePassword&amp;#41;;
    } else {
        $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.hide&amp;#40;0&amp;#41;;
    }
}

// Show icon if the input is not null, and then verify.
function showIconAndVerify&amp;#40;&amp;#41; {
    if &amp;#40;$&amp;#40;&amp;quot;#verify-password-input&amp;quot;&amp;#41;.val&amp;#40;&amp;#41;.length &amp;gt; 0&amp;#41; {
        $&amp;#40;&amp;quot;#verify-password-check&amp;quot;&amp;#41;.show&amp;#40;0, verifyPassword&amp;#41;;
    } else {
        $&amp;#40;&amp;quot;#verify-password-check&amp;quot;&amp;#41;.hide&amp;#40;0&amp;#41;;
    }
}

// Set-up events.
$&amp;#40;&amp;quot;#password-input&amp;quot;&amp;#41;.keyup&amp;#40;showIconAndValidate&amp;#41;;
$&amp;#40;&amp;quot;#verify-password-input&amp;quot;&amp;#41;.keyup&amp;#40;showIconAndVerify&amp;#41;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Kalau sesiapa yang dah pro mungkin boleh nampak, ada bahagian yang tidak menggunakan konsep DRY(Don't-Repeat-Yourself). Sebelum membuat validation dan verification, saya check sama ada textfield ada input ataupun tidak. Kalau ada display, kalau tiada hide. Bahagian tersebut saya tulis dua kali, satu untuk textfield password, satu lagi untuk textfield verify password, jadi tak berapa bagus di situ.&lt;/p&gt;&lt;p&gt;Oleh itu, saya perlu membuat satu function untuk handle sama ada textfield ada input ataupun tidak. Tapi, tunggu dulu. Perhatikan selepas checking tersebut, saya ada membuat callback. Callback validatePassword() untuk password, callback verifyPassword() untuk verify password. Jadi, bagaimana kita nak asingkan callback tersebut? Ya, di sinilah saya menggunakan closure.&lt;/p&gt;&lt;p&gt;Code yang baru selepas refactor akan jadi seperti ini:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;// Check password length. Toggle icon accordingly. Password must be at least 
// 6 characters. 
function validatePassword&amp;#40;&amp;#41; {
    if &amp;#40;$&amp;#40;&amp;quot;#password-input&amp;quot;&amp;#41;.val&amp;#40;&amp;#41;.length &amp;gt;= 6&amp;#41; {
        $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.removeClass&amp;#40;&amp;quot;glyphicon-remove&amp;quot;&amp;#41;;
        $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.addClass&amp;#40;&amp;quot;glyphicon-ok&amp;quot;&amp;#41;;
    } else {
        $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.removeClass&amp;#40;&amp;quot;glyphicon-ok&amp;quot;&amp;#41;;
        $&amp;#40;&amp;quot;#password-check&amp;quot;&amp;#41;.addClass&amp;#40;&amp;quot;glyphicon-remove&amp;quot;&amp;#41;;
    }
}

// Check if password verification is the same with password. Toggle icon
// accordingly.
function verifyPassword&amp;#40;&amp;#41; {
    if &amp;#40;$&amp;#40;&amp;quot;#verify-password-input&amp;quot;&amp;#41;.val&amp;#40;&amp;#41; === $&amp;#40;&amp;quot;#password-input&amp;quot;&amp;#41;.val&amp;#40;&amp;#41;&amp;#41; {
        $&amp;#40;&amp;quot;#verify-password-check&amp;quot;&amp;#41;.removeClass&amp;#40;&amp;quot;glyphicon-remove&amp;quot;&amp;#41;;
        $&amp;#40;&amp;quot;#verify-password-check&amp;quot;&amp;#41;.addClass&amp;#40;&amp;quot;glyphicon-ok&amp;quot;&amp;#41;;
    } else {
        $&amp;#40;&amp;quot;#verify-password-check&amp;quot;&amp;#41;.removeClass&amp;#40;&amp;quot;glyphicon-ok&amp;quot;&amp;#41;;
        $&amp;#40;&amp;quot;#verify-password-check&amp;quot;&amp;#41;.addClass&amp;#40;&amp;quot;glyphicon-remove&amp;quot;&amp;#41;;
    }
}

// Show icon if the input is not null.
function showIcon&amp;#40;callback&amp;#41; {
    return function&amp;#40;&amp;#41; {
        var input = $&amp;#40;this&amp;#41;;
        var icon = $&amp;#40;this&amp;#41;.parent&amp;#40;&amp;#41;.next&amp;#40;&amp;#41;;
        
        if &amp;#40;input.val&amp;#40;&amp;#41;.length &amp;gt; 0&amp;#41; {
            icon.show&amp;#40;0, callback&amp;#41;;
        } else {
            icon.hide&amp;#40;0&amp;#41;;
        }
    };
}

// Set-up events.
$&amp;#40;&amp;quot;#password-input&amp;quot;&amp;#41;.keyup&amp;#40;showIcon&amp;#40;validatePassword&amp;#41;&amp;#41;;
$&amp;#40;&amp;quot;#verify-password-input&amp;quot;&amp;#41;.keyup&amp;#40;showIcon&amp;#40;verifyPassword&amp;#41;&amp;#41;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Saya menggunakan JavaScript traversing, iaitu &lt;code&gt;$&amp;#40;this&amp;#41;.parent&amp;#40;&amp;#41;.next&amp;#40;&amp;#41;&lt;/code&gt; untuk pilih icon. Ini tidak ada kena mengena dengan closure. Baca seterusnya untuk penjelasan mengenai closure.&lt;/p&gt;&lt;p&gt;Dalam jQuery, kita boleh passing function sebagai callback. Dalam JavaScript, jika kita letak kurungan selepas function, secara automatik kita akan invoke function tersebut. Dalam masalah saya ini, saya letak function sebagai parameter untuk callback. Jadi kalau saya tidak membuat closure, apabila saya pass function sebagai argument untuk function showIcon(), secara automatik saya invoke showIcon(), tetapi saya tak mahu begitu. Saya mahu jQuery yang invoke showIcon() bergantung kepada event yang saya tetapkan. Jadi, dengan menggunakan closure, saya boleh pass function showIcon() yang dah 'combined' dengan function yang lain.&lt;/p&gt;&lt;p&gt;Awesome kan?&lt;/p&gt;&lt;p&gt;P/S: Perhatikan function validatePassword() dan verifyPassword() ada bahagian yang berulang. Saya serahkan kepada pembaca untuk selesaikan masalah tersebut. :)&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sun, 18 Oct 2015 00:00:00 +0800
</pubDate>
</item>
</channel>
</rss>
